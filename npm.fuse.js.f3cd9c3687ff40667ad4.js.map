{"version":3,"sources":["webpack:///./node_modules/fuse.js/dist/fuse.esm.js"],"names":["isArray","value","Array","Object","prototype","toString","call","isString","isNumber","isDefined","isBlank","trim","length","hasOwn","hasOwnProperty","KeyStore","keys","this","_keys","_keyMap","totalWeight","forEach","key","obj","createKey","weight","push","id","keyId","JSON","stringify","path","src","createKeyPath","createKeyId","Error","name","MISSING_KEY_PROPERTY","INVALID_KEY_WEIGHT_VALUE","split","join","Config","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","includeMatches","findAllMatches","minMatchCharLength","location","threshold","distance","useExtendedSearch","getFn","list","arr","deepGet","index","result","baseToString","i","len","ignoreLocation","ignoreFieldNorm","SPACE","FuseIndex","norm","mantissa","cache","Map","numTokens","match","has","get","n","parseFloat","Math","sqrt","toFixed","set","clear","isCreated","setIndexRecords","docs","records","_keysMap","doc","docIndex","_addString","_addObject","size","splice","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","setKeys","map","setSources","create","transformMatches","data","matches","indices","refIndex","transformScore","computeScore","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","search","text","patternAlphabet","patternLen","textLen","max","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","start","finish","bitArr","j","charMatch","charAt","isMatch","matchmask","end","convertMaskToIndices","createPatternAlphabet","char","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","allIndices","totalScore","hasMatches","BaseMatch","getMatch","multiRegex","singleRegex","exp","FuzzyMatch","super","_bitapSearch","searchIn","IncludeMatch","searchers","startsWith","endsWith","searchersLen","SPACE_RE","MultiMatchSet","Set","type","ExtendedSearch","query","filter","results","queryItem","found","searcher","token","isMultiMatch","isSingleMatch","parseQuery","_","numMatches","qLen","pLen","constructor","registeredSearchers","createSearcher","searcherClass","condition","LogicalOperator","KeyType","isExpression","convertToExplicit","parse","auto","next","isQueryPath","isPath","isLeaf","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","node","children","operator","Fuse","_keyStore","setCollection","_docs","_myIndex","add","predicate","removeAt","limit","_searchStringList","_searchObjectList","_searchLogical","pow","Number","EPSILON","computeScore$1","sort","slice","transformers","transformer","format","expression","evaluate","_findMatches","getValueForItemAtKeyId","res","child","resultMap","expResults","version","parseIndex","config","args","register"],"mappings":"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","file":"npm.fuse.js.f3cd9c3687ff40667ad4.js","sourcesContent":["/**\n * Fuse.js v6.4.0 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2020 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? Object.prototype.toString.call(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from:\n// https://github.com/lodash/lodash/blob/f4ca396a796435422bd4fd41fadbd225edddf175/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (index === path.length - 1 && (isString(value) || isNumber(value))) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      const n = parseFloat((1 / Math.sqrt(numTokens)).toFixed(mantissa));\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({ getFn = Config.getFn } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(keys, docs, { getFn = Config.getFn } = {}) {\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(data, { getFn = Config.getFn } = {}) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction computeScore(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 1 : 0,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore$1(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n      switch (node.operator) {\n        case LogicalOperator.AND: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n            } else {\n              return []\n            }\n          }\n          return res\n        }\n        case LogicalOperator.OR: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n              break\n            }\n          }\n          return res\n        }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\n// Practical scoring function\nfunction computeScore$1(results, { ignoreFieldNorm = Config.ignoreFieldNorm }) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nFuse.version = '6.4.0';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport default Fuse;\n"],"sourceRoot":""}