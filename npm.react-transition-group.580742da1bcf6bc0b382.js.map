{"version":3,"sources":["webpack:///./node_modules/react-transition-group/esm/config.js","webpack:///./node_modules/react-transition-group/esm/TransitionGroupContext.js","webpack:///./node_modules/react-transition-group/esm/Transition.js","webpack:///./node_modules/react-transition-group/esm/CSSTransition.js","webpack:///./node_modules/react-transition-group/esm/utils/ChildMapping.js","webpack:///./node_modules/react-transition-group/esm/TransitionGroup.js","webpack:///./node_modules/react-transition-group/esm/ReplaceTransition.js","webpack:///./node_modules/react-transition-group/esm/SwitchTransition.js"],"names":["disabled","createContext","ENTERING","ENTERED","_React$Component","Transition","props","context","_this","call","this","initialStatus","appear","isMounting","enter","appearStatus","in","unmountOnExit","mountOnEnter","state","status","nextCallback","getDerivedStateFromProps","_ref","prevState","_proto","prototype","componentDidMount","updateStatus","componentDidUpdate","prevProps","nextStatus","componentWillUnmount","cancelNextCallback","getTimeouts","exit","timeout","undefined","mounting","performEnter","performExit","setState","_this2","appearing","_ref2","nodeRef","findDOMNode","maybeNode","maybeAppearing","timeouts","enterTimeout","config","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","_this3","onExit","onExiting","onExited","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","node","current","doesNotHaveTimeoutOrListener","addEndListener","_ref3","maybeNextCallback","setTimeout","render","_this$props","children","childProps","createElement","TransitionGroupContext","Provider","value","cloneElement","Children","only","Component","noop","contextType","propTypes","defaultProps","UNMOUNTED","EXITED","EXITING","classes","split","forEach","c","CSSTransition","_len","arguments","length","args","Array","_key","apply","concat","appliedClasses","_this$resolveArgument","resolveArguments","removeClasses","addClass","_this$resolveArgument2","type","_this$resolveArgument3","getClassNames","classNames","isStringClassNames","baseClassName","activeClassName","doneClassName","phase","className","scrollTop","_addClass","_this$appliedClasses$","base","done","getChildMapping","mapFn","result","Object","create","map","child","key","mapper","getProp","prop","getNextChildMapping","nextProps","prevChildMapping","nextChildMapping","prev","next","getValueForKey","i","nextKeysPending","pendingKeys","prevKey","push","childMapping","nextKey","pendingNextKey","mergeChildMappings","keys","hasPrev","hasNext","prevChild","isLeaving","bind","values","obj","k","TransitionGroup","handleExited","contextValue","firstRender","mounted","currentChildMapping","component","childFactory","ReplaceTransition","_args","handleEnter","_len2","_key2","handleLifecycle","handleEntering","_len3","_key3","handleEntered","_len4","_key4","handleExit","_len5","_key5","handleExiting","_len6","_key6","_len7","_key7","idx","originalArgs","_child$props","toArray","inProp","_React$Children$toArr","first","second","_leaveRenders","_enterRenders","modes","callHook","element","name","cb","_element$props","leaveRenders","changeState","enterRenders","_ref4","SwitchTransition","appeared","mode","oldChildren","newChildren","isValidElement","_this$state","data"],"mappings":"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","file":"npm.react-transition-group.580742da1bcf6bc0b382.js","sourcesContent":["export default {\n  disabled: false\n};","import React from 'react';\nexport default React.createContext(null);","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        _in = _this$props.in,\n        _mountOnEnter = _this$props.mountOnEnter,\n        _unmountOnExit = _this$props.unmountOnExit,\n        _appear = _this$props.appear,\n        _enter = _this$props.enter,\n        _exit = _this$props.exit,\n        _timeout = _this$props.timeout,\n        _addEndListener = _this$props.addEndListener,\n        _onEnter = _this$props.onEnter,\n        _onEntering = _this$props.onEntering,\n        _onEntered = _this$props.onEntered,\n        _onExit = _this$props.onExit,\n        _onExiting = _this$props.onExiting,\n        _onExited = _this$props.onExited,\n        _nodeRef = _this$props.nodeRef,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: PropTypes.shape({\n    current: typeof Element === 'undefined' ? PropTypes.any : PropTypes.instanceOf(Element)\n  }),\n\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func\n} : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nexport default Transition;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is for to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","import { Children, cloneElement, isValidElement } from 'react';\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\n\nexport function getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && isValidElement(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\nexport function mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nexport function getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return cloneElement(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\nexport function getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!isValidElement(child)) return;\n    var hasPrev = (key in prevChildMapping);\n    var hasNext = (key in nextChildMapping);\n    var prevChild = prevChildMapping[key];\n    var isLeaving = isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = cloneElement(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && isValidElement(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n};\n/**\n * The `<TransitionGroup>` component manages a set of transition components\n * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n * components, `<TransitionGroup>` is a state machine for managing the mounting\n * and unmounting of components over time.\n *\n * Consider the example below. As items are removed or added to the TodoList the\n * `in` prop is toggled automatically by the `<TransitionGroup>`.\n *\n * Note that `<TransitionGroup>`  does not define any animation behavior!\n * Exactly _how_ a list item animates is up to the individual transition\n * component. This means you can mix and match animations across different list\n * items.\n */\n\nvar TransitionGroup = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  } // node is `undefined` when user provided `nodeRef` prop\n  ;\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(React.Component);\n\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: PropTypes.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: PropTypes.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nexport default TransitionGroup;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TransitionGroup from './TransitionGroup';\n/**\n * The `<ReplaceTransition>` component is a specialized `Transition` component\n * that animates between two children.\n *\n * ```jsx\n * <ReplaceTransition in>\n *   <Fade><div>I appear first</div></Fade>\n *   <Fade><div>I replace the above</div></Fade>\n * </ReplaceTransition>\n * ```\n */\n\nvar ReplaceTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ReplaceTransition, _React$Component);\n\n  function ReplaceTransition() {\n    var _this;\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;\n\n    _this.handleEnter = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return _this.handleLifecycle('onEnter', 0, args);\n    };\n\n    _this.handleEntering = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return _this.handleLifecycle('onEntering', 0, args);\n    };\n\n    _this.handleEntered = function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return _this.handleLifecycle('onEntered', 0, args);\n    };\n\n    _this.handleExit = function () {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      return _this.handleLifecycle('onExit', 1, args);\n    };\n\n    _this.handleExiting = function () {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      return _this.handleLifecycle('onExiting', 1, args);\n    };\n\n    _this.handleExited = function () {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      return _this.handleLifecycle('onExited', 1, args);\n    };\n\n    return _this;\n  }\n\n  var _proto = ReplaceTransition.prototype;\n\n  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {\n    var _child$props;\n\n    var children = this.props.children;\n    var child = React.Children.toArray(children)[idx];\n    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);\n\n    if (this.props[handler]) {\n      var maybeNode = child.props.nodeRef ? undefined : ReactDOM.findDOMNode(this);\n      this.props[handler](maybeNode);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        inProp = _this$props.in,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\"]);\n\n    var _React$Children$toArr = React.Children.toArray(children),\n        first = _React$Children$toArr[0],\n        second = _React$Children$toArr[1];\n\n    delete props.onEnter;\n    delete props.onEntering;\n    delete props.onEntered;\n    delete props.onExit;\n    delete props.onExiting;\n    delete props.onExited;\n    return /*#__PURE__*/React.createElement(TransitionGroup, props, inProp ? React.cloneElement(first, {\n      key: 'first',\n      onEnter: this.handleEnter,\n      onEntering: this.handleEntering,\n      onEntered: this.handleEntered\n    }) : React.cloneElement(second, {\n      key: 'second',\n      onEnter: this.handleExit,\n      onEntering: this.handleExiting,\n      onEntered: this.handleExited\n    }));\n  };\n\n  return ReplaceTransition;\n}(React.Component);\n\nReplaceTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  in: PropTypes.bool.isRequired,\n  children: function children(props, propName) {\n    if (React.Children.count(props[propName]) !== 2) return new Error(\"\\\"\" + propName + \"\\\" must be exactly two transition components.\");\n    return null;\n  }\n} : {};\nexport default ReplaceTransition;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\n\nvar _leaveRenders, _enterRenders;\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ENTERED, ENTERING, EXITING } from './Transition';\nimport TransitionGroupContext from './TransitionGroupContext';\n\nfunction areChildrenDifferent(oldChildren, newChildren) {\n  if (oldChildren === newChildren) return false;\n\n  if (React.isValidElement(oldChildren) && React.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Enum of modes for SwitchTransition component\n * @enum { string }\n */\n\n\nexport var modes = {\n  out: 'out-in',\n  in: 'in-out'\n};\n\nvar callHook = function callHook(element, name, cb) {\n  return function () {\n    var _element$props;\n\n    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);\n    cb();\n  };\n};\n\nvar leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function (_ref) {\n  var current = _ref.current,\n      changeState = _ref.changeState;\n  return React.cloneElement(current, {\n    in: false,\n    onExited: callHook(current, 'onExited', function () {\n      changeState(ENTERING, null);\n    })\n  });\n}, _leaveRenders[modes.in] = function (_ref2) {\n  var current = _ref2.current,\n      changeState = _ref2.changeState,\n      children = _ref2.children;\n  return [current, React.cloneElement(children, {\n    in: true,\n    onEntered: callHook(children, 'onEntered', function () {\n      changeState(ENTERING);\n    })\n  })];\n}, _leaveRenders);\nvar enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function (_ref3) {\n  var children = _ref3.children,\n      changeState = _ref3.changeState;\n  return React.cloneElement(children, {\n    in: true,\n    onEntered: callHook(children, 'onEntered', function () {\n      changeState(ENTERED, React.cloneElement(children, {\n        in: true\n      }));\n    })\n  });\n}, _enterRenders[modes.in] = function (_ref4) {\n  var current = _ref4.current,\n      children = _ref4.children,\n      changeState = _ref4.changeState;\n  return [React.cloneElement(current, {\n    in: false,\n    onExited: callHook(current, 'onExited', function () {\n      changeState(ENTERED, React.cloneElement(children, {\n        in: true\n      }));\n    })\n  }), React.cloneElement(children, {\n    in: true\n  })];\n}, _enterRenders);\n/**\n * A transition component inspired by the [vue transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes).\n * You can use it when you want to control the render between state transitions.\n * Based on the selected mode and the child's key which is the `Transition` or `CSSTransition` component, the `SwitchTransition` makes a consistent transition between them.\n *\n * If the `out-in` mode is selected, the `SwitchTransition` waits until the old child leaves and then inserts a new child.\n * If the `in-out` mode is selected, the `SwitchTransition` inserts a new child first, waits for the new child to enter and then removes the old child.\n *\n * **Note**: If you want the animation to happen simultaneously\n * (that is, to have the old child removed and a new child inserted **at the same time**),\n * you should use\n * [`TransitionGroup`](https://reactcommunity.org/react-transition-group/transition-group)\n * instead.\n *\n * ```jsx\n * function App() {\n *  const [state, setState] = useState(false);\n *  return (\n *    <SwitchTransition>\n *      <CSSTransition\n *        key={state ? \"Goodbye, world!\" : \"Hello, world!\"}\n *        addEndListener={(node, done) => node.addEventListener(\"transitionend\", done, false)}\n *        classNames='fade'\n *      >\n *        <button onClick={() => setState(state => !state)}>\n *          {state ? \"Goodbye, world!\" : \"Hello, world!\"}\n *        </button>\n *      </CSSTransition>\n *    </SwitchTransition>\n *  );\n * }\n * ```\n *\n * ```css\n * .fade-enter{\n *    opacity: 0;\n * }\n * .fade-exit{\n *    opacity: 1;\n * }\n * .fade-enter-active{\n *    opacity: 1;\n * }\n * .fade-exit-active{\n *    opacity: 0;\n * }\n * .fade-enter-active,\n * .fade-exit-active{\n *    transition: opacity 500ms;\n * }\n * ```\n */\n\nvar SwitchTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(SwitchTransition, _React$Component);\n\n  function SwitchTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.state = {\n      status: ENTERED,\n      current: null\n    };\n    _this.appeared = false;\n\n    _this.changeState = function (status, current) {\n      if (current === void 0) {\n        current = _this.state.current;\n      }\n\n      _this.setState({\n        status: status,\n        current: current\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = SwitchTransition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.appeared = true;\n  };\n\n  SwitchTransition.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    if (props.children == null) {\n      return {\n        current: null\n      };\n    }\n\n    if (state.status === ENTERING && props.mode === modes.in) {\n      return {\n        status: ENTERING\n      };\n    }\n\n    if (state.current && areChildrenDifferent(state.current, props.children)) {\n      return {\n        status: EXITING\n      };\n    }\n\n    return {\n      current: React.cloneElement(props.children, {\n        in: true\n      })\n    };\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        mode = _this$props.mode,\n        _this$state = this.state,\n        status = _this$state.status,\n        current = _this$state.current;\n    var data = {\n      children: children,\n      current: current,\n      changeState: this.changeState,\n      status: status\n    };\n    var component;\n\n    switch (status) {\n      case ENTERING:\n        component = enterRenders[mode](data);\n        break;\n\n      case EXITING:\n        component = leaveRenders[mode](data);\n        break;\n\n      case ENTERED:\n        component = current;\n    }\n\n    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n      value: {\n        isMounting: !this.appeared\n      }\n    }, component);\n  };\n\n  return SwitchTransition;\n}(React.Component);\n\nSwitchTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Transition modes.\n   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.\n   * `in-out`: New element transitions in first, then when complete, the current element transitions out.\n   *\n   * @type {'out-in'|'in-out'}\n   */\n  mode: PropTypes.oneOf([modes.in, modes.out]),\n\n  /**\n   * Any `Transition` or `CSSTransition` component.\n   */\n  children: PropTypes.oneOfType([PropTypes.element.isRequired])\n} : {};\nSwitchTransition.defaultProps = {\n  mode: modes.out\n};\nexport default SwitchTransition;"],"sourceRoot":""}